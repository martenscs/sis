<?xml version="1.0" encoding="UTF-8"?>

<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->

<!DOCTYPE book [
  <!ENTITY % book.entities SYSTEM "../book.entities">
  %book.entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
      xmlns:xlink = "http://www.w3.org/1999/xlink">

  <title>Classes et méthodes utilitaires</title>
  <para>
    Ce chapitre décrit des aspects de Apache <acronym>SIS</acronym> qui s’appliquent à l’ensemble de la bibliothèque.
    La plupart de ces utilitaires ne sont pas spécifiques aux systèmes d’information spatiales.
  </para>

  <section>
    <title>Modes de comparaisons des objets</title>
    <para>
      Il existe différentes opinions sur la façon d’implémenter la méthode <function>Object.equals(Object)</function> du Java standard.
      Selon certains, il doit être possible de comparer différentes implémentations d’une même interface ou classe de base.
      Mais cette politique nécessite que chaque interface ou classe de base définisse entièrement dans sa Javadoc les critères ou calculs
      que doivent employer les méthodes <function>equals(Object)</function> et <function>hashCode()</function> dans toutes les implémentations.
      Cette approche est choisie notamment par <classname>java.util.Collection</classname> et ses interfaces filles.
      La transposition de cette approche aux centaines d’interfaces de GeoAPI serait toutefois une entreprise ardue,
      qui risquerait d’être assez peu suivie par les diverses implémentations.
      En outre, elle se fait au détriment de la possibilité de prendre en compte des attributs supplémentaires dans les interfaces filles
      si cette possibilité n’a pas été spécifiée dans l’interface parente.
      Cette contrainte découle des points suivants du contrat des méthodes <function>equals(Object)</function> et <function>hashCode()</function>:
    </para>
    <itemizedlist>
      <listitem><literal>A.equals(B)</literal> implique <literal>B.equals(A)</literal> (symétrie);</listitem>
      <listitem><literal>A.equals(B)</literal> et <literal>B.equals(C)</literal> implique <literal>A.equals(C)</literal> (transitivité);</listitem>
      <listitem><literal>A.equals(B)</literal> implique <literal>A.hashCode() == B.hashCode()</literal>.</listitem>
    </itemizedlist>
    <para>
      Par exemple ces trois contraintes sont violées si <varname>A</varname> (et éventuellement <varname>C</varname>)
      peuvent contenir des attributs que <varname>B</varname> ignore.
      Pour contourner cette difficulté, une approche alternative consiste à exiger que les objets comparés par la méthode
      <function>Object.equals(Object)</function> soient exactement de la même classe, c’est-à-dire que <literal>A.getClass() == B.getClass()</literal>.
      Cette approche est parfois considérée contraire aux principes de la programmation orientée objets.
      Dans la pratique, pour des applications relativement complexes, l’importance accordée à ces principes dépend du contexte dans lequel les objets sont comparés:
      si les objets sont ajoutés à un <classname>HashSet</classname> ou utilisés comme clés dans un <classname>HashMap</classname>,
      alors nous avons besoin d’un strict respect du contrat de <function>equals(Object)</function> et <function>hashCode()</function>.
      Mais si le développeur compare les objets lui-même, par exemple pour vérifier si des informations qui l’intéresse ont changées,
      alors les contraintes de symétrie, transitivité ou de cohérence avec les valeurs de hachages peuvent ne pas être pertinentes pour lui.
      Des comparaisons plus permissives peuvent être souhaitables, allant parfois jusqu’à tolérer de légers écarts dans les valeurs numériques.
    </para>
    <para>
      Afin de donner une certaine flexibilité aux développeurs, un grand nombre de classes de la bibliothèque <acronym>SIS</acronym>
      implémentent l’interface <classname role="SIS">org.apache.sis.util.LenientComparable</classname>, qui défini une méthode <function role="SIS">equals(Object, ComparisonMode)</function>.
      Les principaux modes de comparaisons sont:
    </para>
    <itemizedlist>
      <listitem><para>
        <emphasis role="bold"><constant role="SIS">STRICT</constant></emphasis> — Les objets comparés doivent être de la même classe
        et tous leurs attributs strictement égaux, y compris d’éventuels attributs publics propres à l’implémentation.
      </para></listitem>
      <listitem><para>
        <emphasis role="bold"><constant role="SIS">BY_CONTRACT</constant></emphasis> — Les objets comparés doivent implémenter la même interface de GeoAPI (ou tout autre standard),
        mais n’ont pas besoin d’être de la même classe d’implémentation. Seuls les attributs définis dans l’interface sont comparés;
        tout autres attributs propres à l’implémentation — même s’ils sont publics — sont ignorés.
      </para></listitem>
      <listitem><para>
        <emphasis role="bold"><constant role="SIS">IGNORE_METADATA</constant></emphasis> — Comme <constant role="SIS">BY_CONTRACT</constant>,
        mais ne compare que les attributs qui influencent les opérations (calculs numériques ou autre) effectuées par l’objet.
        Par exemple dans un référentiel géodésique, la longitude (par rapport à Greenwich) du méridien d’origine sera pris en compte
        alors que le nom de ce méridien sera ignoré.
      </para></listitem>
      <listitem><para>
        <emphasis role="bold"><constant role="SIS">APPROXIMATIVE</constant></emphasis> — Comme <constant role="SIS">IGNORE_METADATA</constant>,
        mais tolère de légères différences dans les valeurs numériques.
      </para></listitem>
    </itemizedlist>
    <para>
      Le mode par défaut, utilisé par les toutes les méthodes <function>equals(Object)</function> de <acronym>SIS</acronym>,
      est <constant role="SIS">STRICT</constant>. Ce mode est choisi pour une utilisation sécuritaire — notamment avec <classname>HashMap</classname> —
      sans nécessiter de définitions rigoureuses des méthodes <function>equals(Object)</function> et <function>hashCode()</function> dans toutes les interfaces.
      Avec ce mode, l’ordre des objets (<literal>A.equals(B)</literal> ou <literal>B.equals(A)</literal>) n’a pas d’importance.
      C’est toutefois le seul mode à offrir cette garantie. Dans l’expression <literal>A.equals(B)</literal>,
      le mode <constant role="SIS">BY_CONTRACT</constant> (et donc par extension tous les autres modes qui en dépendent)
      ne comparera que les propriétés connues de <literal>A</literal>, sans se soucier de savoir si <literal>B</literal>
      en connaît davantage.
    </para>
  </section>



  <section>
    <title>Internationalisation</title>
    <para>
      Dans une architecture où un programme exécuté sur un serveur fournit ses données à plusieurs clients,
      les conventions locales du serveur ne sont pas nécessairement les mêmes que celles des clients.
      Les conventions peuvent différer par la langue, mais aussi par la façon d’écrire les valeurs numériques
      (même entre deux pays parlant la même langue) ainsi que par le fuseau horaire.
      Pour produire des messages conformes aux conventions du client, <acronym>SIS</acronym> emploie
      deux approches qui diffèrent par leur niveau de granularité: au niveau des messages eux-mêmes,
      ou au niveau des objets produisant les messages. L’approche utilisée détermine aussi s’il est
      possible de partager une même instance d’un objet pour toutes les langues.
    </para>

    <section>
      <title>Chaînes de caractères distinctes pour chaque conventions locales</title>
      <para>
        Certaines classes ne sont conçues que pour fonctionner selon une convention locale à la fois.
        C’est évidemment le cas des implémentations standards de <classname>java.text.Format</classname>,
        puisqu’elles sont entièrement dédiées au travail d’internationalisation.
        Mais c’est aussi le cas de d’autres classes moins évidentes comme
        <classname>javax.imageio.ImageReader</classname>/<classname>ImageWriter</classname> ainsi que les exceptions.
        Lorsque une de ces classes est implémentée par <acronym>SIS</acronym>,
        nous l’identifions en implémentant l’interface <classname role="SIS">org.apache.sis.util.Localized</classname>.
        La méthode <function role="SIS">getLocale()</function> de cette interface permet alors de déterminer
        selon quelles conventions locales l’instance produira ses messages.
      </para>
      <para>
        Certaines sous-classes de <classname>Exception</classname> définies par <acronym>SIS</acronym>
        implémentent aussi l’interface <classname role="SIS">Localized</classname>.
        Pour ces exceptions, le message d’erreur peut être produit selon deux conventions locales
        selon qu’il s’adresse à l’administrateur du système ou au client:
        <function>getMessage()</function> retourne le message de l’exception selon les conventions par défaut du système, alors que
        <function>getLocalizedMessage()</function> retourne le message de l’exception selon les conventions locales spécifiées par <function role="SIS">getLocale()</function>.
        Ce <classname>Locale</classname> sera lui-même déterminé par l’objet <classname role="SIS">Localized</classname> qui a lancé l’exception.
      </para>
      <informalexample><para>
        <emphasis role="bold">Exemple:</emphasis>
        Supposons que dans un environnement où la langue par défaut serait l’anglais,
        un objet <classname role="SIS">AngleFormat</classname> est construit pour lire des angles selon les conventions françaises.
        Si une <classname>ParseException</classname> est lancée lors de l’utilisation de ce formateur,
        alors <function>getMessage()</function> retournera le message d’erreur en anglais
        tandis que <function>getLocalizedMessage()</function> retournera le message d’erreur en français.
      </para></informalexample>
      <para>
        Les exceptions définies par <acronym>SIS</acronym> n’implémentent pas toutes l’interface <classname role="SIS">Localized</classname>.
        Seules celles dont le message est le plus susceptible d’être montré à l’utilisateur sont ainsi localisées.
        Les <classname>ParseException</classname> sont de bonnes candidates puisqu’elles surviennent souvent
        suite à une saisie incorrecte du client. En revanche les <classname>NullPointerException</classname>
        sont généralement la conséquence d’une erreur de programmation;
        elles peuvent être localisées dans la langue par défaut du système, mais ça sera généralement tout.
      </para>
      <para>
        La classe utilitaire <classname role="SIS">org.apache.sis.util.Exceptions</classname> fournit
        des méthodes de commodité pour obtenir des messages selon des conventions locales données
        lorsque cette information est disponible.
      </para>
    </section>

    <section>
      <title>Instance unique pour toutes les conventions locales</title>
      <para>
        Les <acronym>API</acronym> définit par <acronym>SIS</acronym> ou hérités de GeoAPI
        privilégient plutôt l’utilisation du type <classname role="GeoAPI">InternationalString</classname>
        là où une valeur de type <classname>String</classname> serait susceptible d’être localisée.
        Cette approche permet de différer le processus d’internationalisation au moment d’obtenir
        une chaîne de caractères plutôt qu’au moment de construire l’objet qui les contient.
        C’est particulièrement utile pour les classes immutables dont les instances existent
        en un seul exemplaire indépendamment des conventions locales.
      </para>
      <informalexample><para>
        <emphasis role="bold">Exemple:</emphasis>
        Il existe dans <acronym>SIS</acronym> une seule instance de type <classname role="GeoAPI">OperationMethod</classname>
        représentant la projection de Mercator, quelle que soit la langue du client.
        Mais sa méthode <function role="GeoAPI">getName()</function> fournit (indirectement)
        une instance de <classname role="GeoAPI">InternationalString</classname> telle que
        <literal>toString(Locale.ENGLISH)</literal> retourne <quote>Mercator Projection</quote>
        alors que <literal>toString(Locale.FRENCH)</literal> retourne <quote>Projection de Mercator</quote>.
      </para></informalexample>
      <para>
        En définissant des objets spatiaux indépendemment des conventions locales, on réduit les risques de sur-coûts de calculs.
        Par exemple il est plus facile de détecter que deux cartes emploient la même projection cartographique si cette dernière
        est représentée par la même instance de <classname role="GeoAPI">CoordinateOperation</classname>, même si la projection
        porte différents noms selon les pays. En outre, certain types de <classname role="GeoAPI">CoordinateOperation</classname>
        peuvent nécessiter des grilles de transformation de coordonnées, ce qui accroît l’intérêt de partager une instance unique
        pour des raisons d’économie de mémoire.
      </para>
    </section>

    <section>
      <title>Convention <constant>Locale.ROOT</constant></title>
      <para>
        Toutes les méthodes <acronym>SIS</acronym> recevant ou retournant une valeur de type <classname>Locale</classname>
        acceptent la valeur <constant>Locale.ROOT</constant>. Cette valeur est interprétée comme signifiant de ne pas localiser le texte.
        La notion de <quote>texte non-localisé</quote> est un peu fausse, puisqu’il faut bien choisir une convention de format.
        Mais cette convention, bien que très proche de l’anglais, sera généralement légèrement différente.
        Par exemple:
      </para>
      <itemizedlist>
        <listitem>
          Les identifiants sont écrits tels qu’ils apparaissent dans les diagrammes <acronym>UML</acronym>,
          par exemple <quote>blurredImage</quote> au lieu de <quote>Blurred image</quote>.
        </listitem>
        <listitem>
          Les dates sont écrites selon le format <acronym>ISO</acronym> 8601,
          qui ne correspond pas aux conventions anglaises.
        </listitem>
        <listitem>
          Les nombres sont écrits à l’aide de leurs méthodes <function>toString()</function> plutôt qu’à l’aide d’un <classname>java.text.NumberFormat</classname>.
          Il en résulte des différences dans le nombre de chiffres significatifs, l’utilisation de la notation exponentielle et l’absence de séparateur des milliers.
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Traitement des caractères</title>
      <para>
        Les chaînes de caractères en Java utilisent l’encodage UTF-16. Il existe une correspondance directe
        entre les valeurs de type <classname>char</classname> et la très grande majorité des caractères, ce
        qui facilite l’utilisation des chaînes lorsque ces caractères suffisent.
        Mais certains caractères Unicode ne sont pas représentables par un seul <classname>char</classname>.
        Ces <firstterm>caractères supplémentaires</firstterm> comprennent certains idéogrammes,
        mais aussi des symboles routiers et géographiques dans la plage 1F680 à 1F700.
        Le support de ces caractères supplémentaires nécessite des itérations un peu plus complexes
        que le cas classique où l’on supposait une correspondance directe.
        Ainsi, au lieu de la boucle de gauche ci-dessous, les applications internationales devraient
        généralement utiliser la boucle de droite:
      </para>
      <example>
        <title>Boucle sur une chaîne pouvant contenir des caractères supplémentaires</title>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="50%"/>
            <colspec colwidth="50%"/>
            <tbody>
              <row>
                <entry>
                  <programlisting language="java">for (int i=0; i&lt;string.length(); i++) {
    char c = string.charAt(i);
    if (Character.isWhitespace(c)) {
        // Un espace blanc a été trouvé.
    }
}</programlisting>
                </entry>
                <entry>
                  <programlisting language="java">for (int i=0; i&lt;string.length();) {
    int c = string.codePointAt(i);
    if (Character.isWhitespace(c)) {
        // Un espace blanc a été trouvé.
    }
    i += Character.charCount(c);
}</programlisting>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </example>
      <para>
        <acronym>SIS</acronym> supporte les caractères supplémentaires en utilisant la boucle de droite lorsque nécessaire.
        Mais la boucle de gauche reste occasionnellement utilisée lorsqu’il est connu que les caractères recherchés ne sont
        pas des caractères supplémentaires, même si la chaîne dans laquelle on fait la recherche peut en contenir.
      </para>

      <section>
      <title>Interprétation des espaces blancs</title>
        <para>
          Le Java standard fournit deux méthodes pour déterminer si un caractères est un espace blanc:
          <function>Character.isWhitespace(…)</function> et <function>Character.isSpaceChar(…)</function>.
          Ces deux méthodes diffèrent dans leurs interprétations des espaces insécables, des tabulations et des retours à la ligne.
          La première méthode est conforme à l’interprétation couramment utilisée dans des langages telles que le Java, C/C++ et XML,
          qui considère les tabulations et retours à la ligne comme des espaces blancs,
          alors que les espaces insécables sont interprétés comme des caractères non-blanc.
          La seconde méthode — strictement conforme à la définition Unicode — fait l’interprétation inverse.
        </para>
        <para>
          <acronym>SIS</acronym> emploie ces deux méthodes dans des contextes différents.
          <function>isWhitespace(…)</function> est utilisée pour <emphasis>séparer</emphasis>
          les éléments d’une liste (nombres, dates, mots, <foreignphrase>etc.</foreignphrase>),
          tandis que <function>isSpaceChar(…)</function> est utilisée pour ignorer les espaces
          blancs <emphasis>à l’intérieur</emphasis> d’un seul élément.
        </para>
        <informalexample><para>
          <emphasis role="bold">Exemple:</emphasis>
          Supposons une liste de nombres représentés selon les conventions françaises.
          Chaque nombre peut contenir des <emphasis>espace insécables</emphasis> comme séparateurs des milliers,
          tandis que les différents nombres de la liste peuvent être séparés par des espaces ordinaires, des tabulations ou des retours à la ligne.
          Pendant l’analyse d’un nombre, on veut considérer les espaces insécables comme faisant partie du nombre,
          alors qu’une tabulation ou un retour à la ligne indique très probablement une séparation entre ce nombre et le nombre suivant.
          On utilisera donc <function>isSpaceChar(…)</function>.
          Inversement, lors de la séparation des nombres de la liste, on veut considérer les tabulations et
          les retours à la ligne comme des séparateurs mais pas les espaces insécables.
          On utilisera donc <function>isWhitespace(…)</function>.
          Le rôle des espaces ordinaires, qui pourraient s’appliquer aux deux cas, doit être décidé en amont.
        </para></informalexample>
        <para>
          Dans la pratique, cette distinction se traduit pas une utilisation de <function>isSpaceChar(…)</function>
          dans les implémentations de <classname>java.text.Format</classname>,
          et une utilisation de <function>isWhitespace(…)</function> dans pratiquement tout le reste
          de la bibliothèque <acronym>SIS</acronym>.
        </para>
      </section>
    </section>
  </section>
</chapter>
